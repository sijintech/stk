import React, { useReducer } from "react";

// A context is made up state and dispatch
//
// State part
interface Viz3DState {
  fileContent?: string;
  fileList?: string[];
  fileName?: string;
  fileLoc?: string;
  fileChanged?: boolean;
  componentChanged?: boolean;
  loadData?: boolean;
  componentCount?: number;
  componentNames?: string[];
  selectedComponent?: string;
  exportScene?: boolean;
  exportGIF?: boolean;
  exportCount?: number;
  initialSetup?: boolean;
}

const defaultViz3DState: Viz3DState = {
  fileContent: `<?xml version="1.0" encoding="UTF-8"?>
    <VTKFile type="ImageData">    <!--This file is generated by NIO VTK_RectilinearGrid_write-->
        <ImageData WholeExtent="0 4 0 1 0 1" Origin="0 0 0" Spacing="1 1 1">
            <Piece Extent="0 4 0 1 0 1">
                <PointData Scalars="scalar_data_0">
                <DataArray type="Float64" Name="scalar_data_0" format="ascii">+0.00e+00 +4.00e+00 +8.00e+00 +1.20e+01 +1.60e+01 +2.00e+00 +6.00e+00 +1.00e+01 +1.40e+01 +1.80e+01 +1.00e+00 +5.00e+00 +9.00e+00 +1.30e+01 +1.70e+01 +3.00e+00 +7.00e+00 +1.10e+01 +1.50e+01 +1.90e+01 </DataArray>
                </PointData>
            </Piece>
        </ImageData>
    </VTKFile>`,
  fileList: [],
  fileName: "",
  fileLoc: "",
  fileChanged: false,
  componentChanged: false,
  loadData: false,
  componentCount: 0,
  componentNames: [],
  selectedComponent: "",
  exportScene: false,
  exportGIF: false,
  exportCount: 0,
  initialSetup: true,
};

// reducer part

export enum Viz3DActionType {
  "Update",
  "AddExport",
  "ResetChange",
}

interface Update {
  type: Viz3DActionType.Update;
  payload: Viz3DState;
}

interface AddExport {
  type: Viz3DActionType.AddExport;
}

interface ResetChange {
  type: Viz3DActionType.ResetChange;
}

export type Viz3DAction = Update | AddExport | ResetChange;

const Viz3DReducer = (state: Viz3DState, action: Viz3DAction): Viz3DState => {
  switch (action.type) {
    case Viz3DActionType.Update:
      return {
        ...state,
        ...action.payload,
      };
    case Viz3DActionType.AddExport:
      return {
        ...state,
        exportCount: state.exportCount ? state.exportCount + 1 : 1,
      };
    case Viz3DActionType.ResetChange:
      return {
        ...state,
        fileChanged: false,
        componentChanged: false,
        loadData: false,
      };
    default:
      return state;
  }
};

// context part
const Viz3DContext = React.createContext<{
  state: Viz3DState;
  dispatch: React.Dispatch<Viz3DAction>;
}>({
  state: defaultViz3DState,
  dispatch: () => undefined,
});

const Viz3DProvider: React.FC<{ children: React.ReactNode }> = ({
  children,
}) => {
  const [state, dispatch] = useReducer(Viz3DReducer, defaultViz3DState);

  return (
    <Viz3DContext.Provider value={{ state, dispatch }}>
      {children}
    </Viz3DContext.Provider>
  );
};

export { Viz3DContext, Viz3DProvider };
