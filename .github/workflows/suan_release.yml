# name: Suan App Release 

# # 指定此工作流的触发器
# on:
#   workflow_dispatch:
#     inputs:
#       tags:
#         description: "v*"
#         required: true
#   push:
#     # 匹配特定标签 (refs/tags)
#     tags:
#       - 'v*' # 推送事件匹配 v*, 例如 v1.0，v20.15.10 等来触发工作流

# # 需要运行的作业组合
# jobs:
#   # # 任务：创建 release 版本
#   # create-release:
#   #   permissions: write-all
#   #   runs-on: ubuntu-latest
#   #   outputs:
#   #     RELEASE_UPLOAD_ID: ${{ steps.create_release.outputs.id }}
#   #   # if: github.event_name == 'push' && github.ref == 'refs/heads/main' && startsWith(github.ref, 'refs/tags/v')

#   #   steps:
#   #     - uses: actions/checkout@v2
#   #     # 查询版本号（tag）
#   #     - name: Query version number
#   #       id: get_version
#   #       shell: bash
#   #       run: |
#   #         echo "using version tag ${GITHUB_REF}"
#   #         echo "using version tag ${GITHUB_REF:10}"
#   #         echo ::set-output name=version::"${GITHUB_REF:10}"

#   #     # 根据查询到的版本号创建 release
#   #     - name: Create Release
#   #       id: create_release
#   #       uses: actions/create-release@v1
#   #       env:
#   #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#   #       with:
#   #         tag_name: '${{ steps.get_version.outputs.version }}'
#   #         release_name: 'app ${{ steps.get_version.outputs.version }}'
#   #         body: 'See the assets to download this version and install.'
  
#   # 编译 Tauri
#   build-tauri:
#     # needs: create-release
#     strategy:
#       fail-fast: false
#       matrix:
#         platform: [macos-latest, ubuntu-latest, windows-latest]

#     runs-on: ${{ matrix.platform }}
#     # if: github.event_name == 'push' && github.ref == 'refs/heads/main' && startsWith(github.ref, 'refs/tags/v')
#     steps:
#       - uses: actions/checkout@v2

#      # 安装 Node.js
#       - name: Setup node
#         uses: actions/setup-node@v1
#         with:
#           node-version: 16

#       # 安装 Rust
#       - name: Install Rust stable
#         uses: actions-rs/toolchain@v1
#         with:
#           toolchain: stable

#       # 使用 Rust 缓存，加快安装速度
#       - uses: Swatinem/rust-cache@v1

#       - name: install dependencies (ubuntu only)
#         if: matrix.platform == 'ubuntu-latest'
#         run: |
#           sudo apt-get update
#           sudo apt-get install -y libgtk-3-dev webkit2gtk-4.0 libappindicator3-dev librsvg2-dev patchelf

#       # 可选，如果需要将 Rust 编译为 wasm，则安装 wasm-pack
#     #   - uses: jetli/wasm-pack-action@v0.3.0
#     #     with:
#     #       # Optional version of wasm-pack to install(eg. 'v0.9.1', 'latest')
#     #       version: v0.9.1

#       # 可选，如果需要使用 rsw 构建 wasm，则安装 rsw
#     #   - name: Install rsw
#     #     run: cargo install rsw

#       # 获取 yarn 缓存路径
#       - name: Get yarn cache directory path
#         id: yarn-cache-dir-path
#         run: echo "::set-output name=dir::$(yarn config get cacheFolder)"

#       # 使用 yarn 缓存
#       - name: Yarn cache
#         uses: actions/cache@v2
#         id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
#         with:
#           path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
#           key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
#           restore-keys: |
#             ${{ runner.os }}-yarn-

#       # 安装依赖执行构建，以及推送 github release
#       - name: Install app dependencies and build it
#         run: |
#           cd .\apps\suan\simple-cone\
#           ls
#           yarn && yarn build
#       - uses: tauri-apps/tauri-action@v0
#         # env:
#         #   GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         # with:
#         #   releaseId: ${{ needs.create-release.outputs.RELEASE_UPLOAD_ID }}
        
#       - name: setup aliyun oss
#         uses: manyuanrong/setup-ossutil@master
#         with:
#             endpoint: oss-cn-hangzhou.aliyuncs.com
#             access-key-id: ${{ secrets.KEY }} # 刚刚配置过的AccessKeyId
#             access-key-secret: ${{ secrets.SECRET }} # 刚刚配置过的AccessKeySecret
#       - name: cp files to aliyun
#         run: ossutil cp -rf public oss://sijin-suan-update/ # 将xxxxx改为创建的Bucket名称，-rf表示覆盖

name: Suan App Release 

# 指定此工作流的触发器
on:
  workflow_dispatch:
    inputs:
      tags:
        description: "v*"
        required: true
  push:
    # 匹配特定标签 (refs/tags)
    tags:
      - 'v*' # 推送事件匹配 v*, 例如 v1.0，v20.15.10 等来触发工作流
# 需要运行的作业组合
jobs:
    # build-tauri:
    #     # 这是指定作业执行策略的部分。在这里，使用了矩阵策略，它允许并行在不同平台上运行相同的作业
    #     strategy:
    #         # 允许在矩阵中的一个作业失败后继续运行其他作业
    #       fail-fast: false
    #       #  这定义了一个矩阵，其中 platform 是一个变量，它在不同的平台上运行作业
    #       matrix:
    #         # platform: [ubuntu-20.04,windows-latest]
    #         platform: [self-hosted]
    #         # platform: [windows-latest]
    
    #     runs-on: ${{ matrix.platform }}

    #     steps:
    #         - name: Check out repository
    #           uses: actions/checkout@v3

    #         # 安装 Node.js
    #         - name: Setup node
    #           uses: actions/setup-node@v1
    #           with:
    #             node-version: 16
    #         # 安装 Rust
    #         - name: Install Rust stable
    #           uses: actions-rs/toolchain@v1
    #           with:
    #             toolchain: stable

    #         # 使用 Rust 缓存，加快安装速度
    #         - uses: Swatinem/rust-cache@v1

    #         - name: install dependencies and build app (ubuntu)
    #           if: matrix.platform == 'self-hosted'
    #           env:
    #             GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #             TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
    #             TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }} 
    #           run: |
    #             sudo apt-get update
    #             sudo apt install libwebkit2gtk-4.0-dev \
    #             build-essential \
    #             curl \
    #             wget \
    #             libssl-dev \
    #             libgtk-3-dev \
    #             libayatana-appindicator3-dev \
    #             librsvg2-dev
    #             sudo apt install cargo
    #             cargo install tauri-cli
    #             /bin/bash
    #             pwd
    #             cd apps/suan/simple-cone/
    #             chmod +x linux_build.sh
    #             ./linux_build.sh
                
    #         - name: install dependencies and build app(windows)
    #           if: matrix.platform == 'windows-latest'
    #           env:
    #             GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #             TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
    #             TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }} # 密钥的加密文本，与seecrts时输入的密码一致即可。如果未输入密码，则此处留空，如果输入了密码，则也需要添加到 secrets 中，然后使用 ${{ secrets.TAURI_KEY_PASSWORD }} 这种形式
    #           run: |
    #            cd apps/suan/simple-cone/
    #            cargo install tauri-cli
    #            ./window_build.bat
    #            cd src-tauri
    #            dir /b
    #            cd ../../../
    #            pwd


    deploy-and-update:
      # needs: build-tauri
      strategy:
        # 允许在矩阵中的一个作业失败后继续运行其他作业
        fail-fast: false
      #  这定义了一个矩阵，其中 platform 是一个变量，它在不同的平台上运行作业
        matrix:
          # platform: [ubuntu-20.04,windows-latest]
          platform: [self-hosted]
          # platform: [windows-latest]


      runs-on: ${{ matrix.platform }}
      steps:
      - name: get tag
        id: get_tag
        run: |
          echo "TAG=$(echo $GITHUB_REF | sed 's|refs/tags/||')" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install oss2

      - name: Upload files to OSS(window)
        
        # if: matrix.platform == 'windows-latest'
        if: matrix.platform == 'self-hosted'

        env:
          OSS_ENDPOINT: oss-cn-beijing.aliyuncs.com
          OSS_ACCESS_KEY_ID: ${{ secrets.KEY }}
          OSS_ACCESS_KEY_SECRET: ${{ secrets.SECRET }}
          OSS_BUCKET: sijin-suan-update
          # 指定要上传的文件或目录，这里假设您想上传整个repo的内容
          SOURCE_DIR: 'src-tauri\targets\release\bundle\msi'
          # 指定OSS中的目标目录
          TARGET_DIR: 'msi/'
        run: |
          pwd
          python apps\suan\simple-cone\deploy.py
          python apps\suan\simple-cone\update.py


      # - name: Upload files to OSS(ubuntu)
        
      #   if: matrix.platform == 'self-hosted'
      #   env:
      #       OSS_ENDPOINT: oss-cn-beijing.aliyuncs.com
      #       OSS_ACCESS_KEY_ID: ${{ secrets.KEY }}
      #       OSS_ACCESS_KEY_SECRET: ${{ secrets.SECRET }}
      #       OSS_BUCKET: sijin-suan-update
      #       SOURCE_DIR: 'src-tauri\targets\release\bundle\appimage'
      #       TARGET_DIR: 'AppImage/'
      #   run: |
      #       pwd
      #       python apps\suan\simple-cone\deploy.py   
      #       python apps\suan\simple-cone\update.py



            


