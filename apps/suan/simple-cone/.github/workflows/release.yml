# 工作流名称
name: Suan App Release 

# 工作流触发器配置
on:
  push: # 当有代码推送到仓库时触发
    branches:
      - main # 仅在 main 分支上触发
    tags:
      - 'v*' # 仅在 tag 名字匹配 'v*' 模式时触发

# 定义作业
jobs:
  # 任务：创建 release 版本
  create-release:
    runs-on: ubuntu-latest # 在 Ubuntu 最新版本上运行
    outputs:
      RELEASE_UPLOAD_ID: ${{ steps.create_release.outputs.id }} # 将输出值 RELEASE_UPLOAD_ID 设置为 create_release 步骤的输出
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && startsWith(github.ref, 'refs/tags/v')

    steps:
      - uses: actions/checkout@v2 # 使用 actions/checkout 动作，将仓库检出到工作目录

      # 查询版本号（tag）
      - name: Query version number
        id: get_version
        shell: bash
        run: |
          # 打印出 tag 的值（前缀 'v' 后的部分）
          echo "using version tag ${GITHUB_REF:10}" 
          # 将版本号设置为输出值,将从第 10 个字符开始的 ${GITHUB_REF} 字符串截取的部分设置为名为 version 的输出变量
          echo ::set-output name=version::"${GITHUB_REF:10}" # 将版本号设置为输出值

      # 根据查询到的版本号创建 release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # 设置 GitHub 令牌
        with:
          tag_name: '${{ steps.get_version.outputs.version }}' # 使用查询到的版本号作为 tag_name
          release_name: 'app ${{ steps.get_version.outputs.version }}' # 设置发布名称
          body: 'See the assets to download this version and install.' # 发布说明
  
  # 任务：编译 Tauri
  build-tauri:
    needs: create-release # 在 create-release 任务完成后执行
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest] # 在不同平台上执行

    runs-on: ${{ matrix.platform }} # 在指定的平台上运行
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v2 # 使用 actions/checkout 动作，将仓库检出到工作目录

      # 安装 Node.js
      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: 16 # 安装 Node.js 16 版本

      # 安装 Rust
      - name: Install Rust stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable # 安装 Rust 稳定版

      # 使用 Rust 缓存，加快安装速度
      - uses: Swatinem/rust-cache@v1

      # 在 ubuntu 上安装依赖
      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev webkit2gtk-4.0 libappindicator3-dev librsvg2-dev patchelf

      # 获取 yarn 缓存路径
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"

      # 使用 yarn 缓存
      - name: Yarn cache
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      # 安装依赖执行构建，以及推送 github release
      - name: Install app dependencies and build it
        run: yarn && yarn build
      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create-release.outputs.RELEASE_UPLOAD_ID }} # 使用 create-release 任务的输出值
