from PySide6.QtWidgets import (
    QWidget,
    QTableWidget,
    QVBoxLayout,
    QLineEdit,
    QPushButton,
    QHBoxLayout,
    QLabel,
    QTableWidgetItem,
)
from PySide6.QtCore import Qt
import math


class DataTableTab(QWidget):
    def __init__(self, data, ColumnCount):
        super().__init__()
        self.data = data
        self.initUI(ColumnCount)

    def initUI(self, ColumnCount):
        layout = QVBoxLayout()

        input_layout = QHBoxLayout()
        label1 = QLabel("x:")
        input1 = QLineEdit()
        input1.setPlaceholderText("输入x坐标")
        input1.setFixedWidth(150)
        label2 = QLabel("y:")
        input2 = QLineEdit()
        input2.setPlaceholderText("输入y坐标")
        input2.setFixedWidth(150)
        label3 = QLabel("z:")
        input3 = QLineEdit()
        input3.setPlaceholderText("输入z坐标")
        input3.setFixedWidth(150)
        button = QPushButton("Goto")
        button.setFixedWidth(100)

        input_layout.addStretch()
        input_layout.addWidget(label1)
        input_layout.addWidget(input1)
        input_layout.addWidget(label2)
        input_layout.addWidget(input2)
        input_layout.addWidget(label3)
        input_layout.addWidget(input3)
        input_layout.addWidget(button)
        input_layout.addStretch()

        table_layout = QHBoxLayout()
        self.table = QTableWidget()
        self.table.setRowCount(len(self.data))
        self.table.setColumnCount(ColumnCount)
        self.table.verticalHeader().setVisible(False)
        self.table.horizontalHeader().setVisible(False)
        self.table.horizontalHeader().setStretchLastSection(True)
        self.table.setShowGrid(False)
        # table_layout.addStretch(1)
        table_layout.addWidget(self.table)
        # table_layout.addStretch(1)

        layout.addLayout(input_layout)
        layout.addLayout(table_layout)
        layout.setContentsMargins(0, 0, 0, 0)

        self.setLayout(layout)

        self.populateTable()
        self.beautify()

        # 创建用于跳转的槽函数
        def gotoRow():
            x = float(input1.text())
            y = float(input2.text())
            z = float(input3.text())
            matching_items = self.table.findItems(str(x), Qt.MatchExactly)
            if not matching_items:
                return
            for item in matching_items:
                row = item.row()
                if math.isclose(
                    float(self.table.item(row, 1).text()), y
                ) and math.isclose(float(self.table.item(row, 2).text()), z):
                    self.table.setCurrentCell(row, 3)
                    self.table.scrollToItem(item)
                    return

        button.clicked.connect(gotoRow)

    def beautify(self):
        for row in range(0, self.table.rowCount()):
            for col in range(0, 3):
                no_item = self.table.item(row, col)
                no_item.setFlags(
                    no_item.flags() & ~Qt.ItemIsEnabled & ~Qt.ItemIsSelectable
                )

    def populateTable(self):
        row = 0
        for key, value in self.data.items():
            x, y, z = key
            x_item = QTableWidgetItem(str(x))
            y_item = QTableWidgetItem(str(y))
            z_item = QTableWidgetItem(str(z))
            value_item = QTableWidgetItem(str(value))

            self.table.setItem(row, 0, x_item)
            self.table.setItem(row, 1, y_item)
            self.table.setItem(row, 2, z_item)
            self.table.setItem(row, 3, value_item)

            row += 1
        self.table.setColumnWidth(3, 200)


import sys
import os
from PySide6.QtWidgets import QApplication

if __name__ == "__main__":
    print(os.name)
    # app = QApplication(sys.argv)
    # data = {
    #     (48.0, 1.0, 6.0): 0.0010605287970975041,
    #     (48.0, 1.0, 7.0): 0.0010607826989144087,
    #     (48.0, 1.0, 8.0): 0.0010083903325721622,
    #     (48.0, 1.0, 9.0): 0.0010440547484904528,
    #     (48.0, 1.0, 10.0): 0.00101756420917809,
    #     (48.0, 1.0, 11.0): 0.0010457643074914813,
    #     (48.0, 1.0, 12.0): 0.0010404301574453712,
    #     (48.0, 1.0, 13.0): 0.0010495889000594616,
    #     (48.0, 1.0, 14.0): 0.0010451426496729255,
    #     (48.0, 1.0, 15.0): 0.0010354816913604736,
    #     (48.0, 1.0, 16.0): 0.0010237128008157015,
    #     (48.0, 1.0, 17.0): 0.00102481700014323,
    #     (48.0, 1.0, 18.0): 0.0010056199971586466,
    #     (48.0, 1.0, 19.0): 0.000975553470198065,
    #     (48.0, 1.0, 20.0): 0.0009422312723472714,
    #     (48.0, 1.0, 21.0): 0.0009448243654333055,
    #     (48.0, 1.0, 22.0): 0.0009846783941611648,
    #     (48.0, 1.0, 23.0): 0.0009151249541901052,
    #     (48.0, 1.0, 24.0): 0.000707209634128958,
    #     (48.0, 1.0, 25.0): -1.9008514300367096e-06,
    #     (48.0, 1.0, 26.0): 0.0009479576838202775,
    #     (48.0, 1.0, 27.0): 0.001090586418285966,
    #     (48.0, 1.0, 28.0): 0.0010752853704616427,
    #     (48.0, 1.0, 29.0): 0.0010800940217450261,
    #     (48.0, 1.0, 30.0): 0.0010928234551101923,
    #     (48.0, 1.0, 31.0): 0.001098545384593308,
    #     (48.0, 1.0, 32.0): 0.0010805795900523663,
    #     (48.0, 1.0, 33.0): 0.001070536207407713,
    #     (48.0, 1.0, 34.0): 0.0010409567039459944,
    #     (48.0, 1.0, 35.0): 0.001066500204615295,
    #     (48.0, 1.0, 36.0): 0.0010017252061516047,
    #     (48.0, 1.0, 37.0): 0.0009915429400280118,
    #     (48.0, 1.0, 38.0): 0.0010113043244928122,
    #     (48.0, 1.0, 39.0): 0.0010577704524621367,
    #     (48.0, 1.0, 40.0): 0.0009934671688824892,
    #     (48.0, 1.0, 41.0): 0.001008003717288375,
    #     (48.0, 1.0, 42.0): 0.0009998915484175086,
    #     (48.0, 1.0, 43.0): 0.0010632078628987074,
    #     (48.0, 1.0, 44.0): 0.0010106755653396249,
    #     (48.0, 1.0, 45.0): 0.0010390233946964145,
    #     (48.0, 1.0, 46.0): 0.001022971235215664,
    #     (48.0, 1.0, 47.0): 0.0010458446340635419,
    #     (48.0, 1.0, 48.0): 0.0010241587879136205,
    #     (48.0, 2.0, 1.0): 0.001034897519275546,
    #     (48.0, 2.0, 2.0): 0.0009995709406211972,
    #     (48.0, 2.0, 3.0): 0.0010189032182097435,
    #     (48.0, 2.0, 4.0): 0.0010226148879155517,
    #     (48.0, 2.0, 5.0): 0.0010177346412092447,
    #     (48.0, 2.0, 6.0): 0.0009865285828709602,
    #     (48.0, 2.0, 7.0): 0.0009954326087608933,
    #     (48.0, 2.0, 8.0): 0.001044437405653298,
    #     (48.0, 2.0, 9.0): 0.0010072221048176289,
    #     (48.0, 2.0, 10.0): 0.0010358948493376374,
    #     (48.0, 2.0, 11.0): 0.0010217191884294152,
    #     (48.0, 2.0, 12.0): 0.0010315760737285018,
    #     (48.0, 2.0, 13.0): 0.001031908206641674,
    #     (48.0, 2.0, 14.0): 0.0010312790982425213,
    #     (48.0, 2.0, 15.0): 0.001039879396557808,
    #     (48.0, 2.0, 16.0): 0.001031409134157002,
    #     (48.0, 2.0, 17.0): 0.0010141683742403984,
    #     (48.0, 2.0, 18.0): 0.000996665097773075,
    #     (48.0, 2.0, 19.0): 0.0009980140021070838,
    #     (48.0, 2.0, 20.0): 0.0009565942455083132,
    #     (48.0, 2.0, 21.0): 0.0009673209278844297,
    #     (48.0, 2.0, 22.0): 0.0009284740663133562,
    #     (48.0, 2.0, 23.0): 0.0008635080885142088,
    #     (48.0, 2.0, 24.0): 0.0008966712048277259,
    #     (48.0, 2.0, 25.0): 0.000877280835993588,
    #     (48.0, 2.0, 26.0): 0.0009920739103108644,
    #     (48.0, 2.0, 27.0): 0.0009443731978535652,
    #     (48.0, 2.0, 28.0): 0.0010115888435393572,
    #     (48.0, 2.0, 29.0): 0.0010310264769941568,
    #     (48.0, 2.0, 30.0): 0.0010536345653235912,
    #     (48.0, 2.0, 31.0): 0.0010480124037712812,
    #     (48.0, 2.0, 32.0): 0.001054160064086318,
    #     (48.0, 2.0, 33.0): 0.0010296443942934275,
    #     (48.0, 2.0, 34.0): 0.001016237773001194,
    #     (48.0, 2.0, 35.0): 0.0009335171198472381,
    #     (48.0, 2.0, 36.0): 0.0009777757804840803,
    #     (48.0, 2.0, 37.0): 0.0009272673050872982,
    #     (48.0, 2.0, 38.0): 0.000941064499784261,
    #     (48.0, 2.0, 39.0): 0.0008888202719390392,
    #     (48.0, 2.0, 40.0): 0.0009964327327907085,
    #     (48.0, 2.0, 41.0): 0.001004412304610014,
    #     (48.0, 2.0, 42.0): 0.0010502970544621348,
    #     (48.0, 2.0, 43.0): 0.0010026420932263136,
    #     (48.0, 2.0, 44.0): 0.0010655811056494713,
    #     (48.0, 2.0, 45.0): 0.001041576499119401,
    #     (48.0, 2.0, 46.0): 0.0010596628999337554,
    #     (48.0, 2.0, 47.0): 0.0010341891320422292,
    #     (48.0, 2.0, 48.0): 0.0010463049402460456,
    #     (48.0, 3.0, 1.0): 0.0010454145958647132,
    #     (48.0, 3.0, 2.0): 0.0010397254955023527,
    #     (48.0, 3.0, 3.0): 0.0009858000557869673,
    #     (48.0, 3.0, 4.0): 0.000940123398322612,
    #     (48.0, 3.0, 5.0): 0.0009436504915356636,
    #     (48.0, 3.0, 6.0): 0.000941070553380996,
    #     (48.0, 3.0, 7.0): 0.0009733068873174489,
    #     (48.0, 3.0, 8.0): 0.0009166882955469191,
    #     (48.0, 3.0, 9.0): 0.000993359019048512,
    #     (48.0, 3.0, 10.0): 0.000990459811873734,
    #     (48.0, 3.0, 11.0): 0.001032102620229125,
    #     (48.0, 3.0, 12.0): 0.0010390004608780146,
    #     (48.0, 3.0, 13.0): 0.0010486592072993517,
    #     (48.0, 3.0, 14.0): 0.001053227693773806,
    #     (48.0, 3.0, 15.0): 0.0010390974348410964,
    #     (48.0, 3.0, 16.0): 0.0010377202415838838,
    #     (48.0, 3.0, 17.0): 0.0010341107845306396,
    #     (48.0, 3.0, 18.0): 0.001030645682476461,
    #     (48.0, 3.0, 19.0): 0.0009986002696678042,
    #     (48.0, 3.0, 20.0): 0.0010224382858723402,
    #     (48.0, 3.0, 21.0): 0.000989427207969129,
    #     (48.0, 3.0, 22.0): 0.0010172439506277442,
    #     (48.0, 3.0, 23.0): 0.0010308183263987303,
    #     (48.0, 3.0, 24.0): 0.0010072883451357484,
    #     (48.0, 3.0, 25.0): 0.0009953236440196633,
    #     (48.0, 3.0, 26.0): 0.0009605319355614483,
    #     (48.0, 3.0, 27.0): 0.0010526372352614999,
    #     (48.0, 3.0, 28.0): 0.0010233439970761538,
    #     (48.0, 3.0, 29.0): 0.0010524034732952714,
    #     (48.0, 3.0, 30.0): 0.0010555748594924808,
    #     (48.0, 3.0, 31.0): 0.0010783037869259715,
    #     (48.0, 3.0, 32.0): 0.0010642968118190765,
    #     (48.0, 3.0, 33.0): 0.0010573704494163394,
    #     (48.0, 3.0, 34.0): 0.0010309905046597123,
    #     (48.0, 3.0, 35.0): 0.0010577170178294182,
    #     (48.0, 3.0, 36.0): 0.0008909086463972926,
    #     (48.0, 3.0, 37.0): 3.3671142318780767e-07,
    #     (48.0, 3.0, 38.0): 0.0008115997188724577,
    #     (48.0, 3.0, 39.0): 0.0010407856898382306,
    #     (48.0, 3.0, 40.0): 0.0010128779103979468,
    #     (48.0, 3.0, 41.0): 0.001049625687301159,
    #     (48.0, 3.0, 42.0): 0.001054928870871663,
    #     (48.0, 3.0, 43.0): 0.0011298329336568713,
    #     (48.0, 3.0, 44.0): 0.0010794542031362653,
    #     (48.0, 3.0, 45.0): 0.0011081164702773094,
    #     (48.0, 3.0, 46.0): 0.0010835611028596759,
    #     (48.0, 3.0, 47.0): 0.0010976141784340143,
    #     (48.0, 3.0, 48.0): 0.0010618852684274316,
    #     (48.0, 4.0, 1.0): 0.0011151243234053254,
    #     (48.0, 4.0, 2.0): 0.0010588603327050805,
    #     (48.0, 4.0, 3.0): 0.0010541899828240275,
    #     (48.0, 4.0, 4.0): 0.0010280886199325323,
    #     (48.0, 4.0, 5.0): 0.0008881408721208572,
    #     (48.0, 4.0, 6.0): 8.923438485908264e-07,
    #     (48.0, 4.0, 7.0): 0.0008663865737617016,
    #     (48.0, 4.0, 8.0): 0.0010512820445001125,
    #     (48.0, 4.0, 9.0): 0.0010306063340976834,
    #     (48.0, 4.0, 10.0): 0.0010658900719136,
    #     (48.0, 4.0, 11.0): 0.0010656150989234447,
    #     (48.0, 4.0, 12.0): 0.0010764983016997576,
    #     (48.0, 4.0, 13.0): 0.0010775004047900438,
    #     (48.0, 4.0, 14.0): 0.0010744008468464017,
    #     (48.0, 4.0, 15.0): 0.0010824092896655202,
    #     (48.0, 4.0, 16.0): 0.0010738464770838618,
    #     (48.0, 4.0, 17.0): 0.001057655899785459,
    #     (48.0, 4.0, 18.0): 0.0010469509288668633,
    #     (48.0, 4.0, 19.0): 0.001060395035892725,
    #     (48.0, 4.0, 20.0): 0.00103053729981184,
    #     (48.0, 4.0, 21.0): 0.0010560420341789722,
    #     (48.0, 4.0, 22.0): 0.0010417940793558955,
    #     (48.0, 4.0, 23.0): 0.0010282901348546147,
    #     (48.0, 4.0, 24.0): 0.001077602501027286,
    #     (48.0, 4.0, 25.0): 0.0010495680617168546,
    #     (48.0, 4.0, 26.0): 0.0010887584649026394,
    #     (48.0, 4.0, 27.0): 0.0010377700673416257,
    #     (48.0, 4.0, 28.0): 0.001086847623810172,
    #     (48.0, 4.0, 29.0): 0.00109909160528332,
    #     (48.0, 4.0, 30.0): 0.0011345293605700135,
    #     (48.0, 4.0, 31.0): 0.0011494039790704846,
    #     (48.0, 4.0, 32.0): 0.001184604363515973,
    #     (48.0, 4.0, 33.0): 0.001191656687296927,
    #     (48.0, 4.0, 34.0): 0.0011549267219379544,
    #     (48.0, 4.0, 35.0): 0.0010953783057630062,
    #     (48.0, 4.0, 36.0): 2.390493705206609e-07,
    #     (48.0, 4.0, 37.0): -3.0993390964795253e-07,
    #     (48.0, 4.0, 38.0): 1.2128999742344604e-06,
    #     (48.0, 4.0, 39.0): 0.0011207666248083115,
    #     (48.0, 4.0, 40.0): 0.0011628511128947139,
    #     (48.0, 4.0, 41.0): 0.0012038234854117036,
    #     (48.0, 4.0, 42.0): 0.0012323877308517694,
    #     (48.0, 4.0, 43.0): 0.001164340996183455,
    #     (48.0, 4.0, 44.0): 0.00120897451415658,
    #     (48.0, 4.0, 45.0): 0.001168600982055068,
    #     (48.0, 4.0, 46.0): 0.0011763558723032475,
    #     (48.0, 4.0, 47.0): 0.001138744642958045,
    #     (48.0, 4.0, 48.0): 0.0011404771357774734,
    #     (48.0, 5.0, 1.0): 0.0012332812184467912,
    #     (48.0, 5.0, 2.0): 0.001252054120413959,
    #     (48.0, 5.0, 3.0): 0.0011690797982737422,
    #     (48.0, 5.0, 4.0): 0.0011612314265221357,
    #     (48.0, 5.0, 5.0): 2.6435375843902875e-07,
    #     (48.0, 5.0, 6.0): -1.791641466297733e-07,
    #     (48.0, 5.0, 7.0): 1.6690494248905452e-06,
    #     (48.0, 5.0, 8.0): 0.0011063652345910668,
    #     (48.0, 5.0, 9.0): 0.0011384631507098675,
    #     (48.0, 5.0, 10.0): 0.0011694986606016755,
    #     (48.0, 5.0, 11.0): 0.0011796785984188318,
    #     (48.0, 5.0, 12.0): 0.001163790700957179,
    #     (48.0, 5.0, 13.0): 0.0011455354979261756,
    #     (48.0, 5.0, 14.0): 0.0011331896530464292,
    #     (48.0, 5.0, 15.0): 0.001105590956285596,
    #     (48.0, 5.0, 16.0): 0.0010962606174871325,
    #     (48.0, 5.0, 17.0): 0.0010911324061453342,
    #     (48.0, 5.0, 18.0): 0.001081944559700787,
    #     (48.0, 48.0, 31.0): 0.0011939059477299452,
    #     (48.0, 48.0, 32.0): 0.0011717070592567325,
    #     (48.0, 48.0, 33.0): 0.0011352209839969873,
    #     (48.0, 48.0, 34.0): 0.0011174757964909077,
    #     (48.0, 48.0, 35.0): 0.0010599889792501926,
    #     (48.0, 48.0, 36.0): 0.0010827189544215798,
    #     (48.0, 48.0, 37.0): 0.0010607679141685367,
    #     (48.0, 48.0, 38.0): 0.0010570286540314555,
    #     (48.0, 48.0, 39.0): 0.0009843000443652272,
    # }  # replace with your actual data
    # column_count = 4  # replace with your actual column count
    # window = DataTableTab(data, column_count)
    # window.show()
    # sys.exit(app.exec_())
